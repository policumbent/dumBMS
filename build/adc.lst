ARM GAS  /tmp/ccDWrItb.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"adc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/adc.c"
  20              		.section	.text.MX_ADC1_Init,"ax",%progbits
  21              		.align	1
  22              		.global	MX_ADC1_Init
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	MX_ADC1_Init:
  28              	.LFB239:
   1:Core/Src/adc.c **** /* USER CODE BEGIN Header */
   2:Core/Src/adc.c **** /**
   3:Core/Src/adc.c ****   ******************************************************************************
   4:Core/Src/adc.c ****   * @file    adc.c
   5:Core/Src/adc.c ****   * @brief   This file provides code for the configuration
   6:Core/Src/adc.c ****   *          of the ADC instances.
   7:Core/Src/adc.c ****   ******************************************************************************
   8:Core/Src/adc.c ****   * @attention
   9:Core/Src/adc.c ****   *
  10:Core/Src/adc.c ****   * Copyright (c) 2023 STMicroelectronics.
  11:Core/Src/adc.c ****   * All rights reserved.
  12:Core/Src/adc.c ****   *
  13:Core/Src/adc.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Src/adc.c ****   * in the root directory of this software component.
  15:Core/Src/adc.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Src/adc.c ****   *
  17:Core/Src/adc.c ****   ******************************************************************************
  18:Core/Src/adc.c ****   */
  19:Core/Src/adc.c **** /* USER CODE END Header */
  20:Core/Src/adc.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/adc.c **** #include "adc.h"
  22:Core/Src/adc.c **** 
  23:Core/Src/adc.c **** /* USER CODE BEGIN 0 */
  24:Core/Src/adc.c **** 
  25:Core/Src/adc.c **** /* USER CODE END 0 */
  26:Core/Src/adc.c **** 
  27:Core/Src/adc.c **** ADC_HandleTypeDef hadc1;
  28:Core/Src/adc.c **** DMA_HandleTypeDef hdma_adc1;
  29:Core/Src/adc.c **** 
  30:Core/Src/adc.c **** /* ADC1 init function */
ARM GAS  /tmp/ccDWrItb.s 			page 2


  31:Core/Src/adc.c **** void MX_ADC1_Init(void)
  32:Core/Src/adc.c **** {
  29              		.loc 1 32 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 16
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 00B5     		push	{lr}
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 14, -4
  36 0002 85B0     		sub	sp, sp, #20
  37              		.cfi_def_cfa_offset 24
  33:Core/Src/adc.c **** 
  34:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_Init 0 */
  35:Core/Src/adc.c **** 
  36:Core/Src/adc.c ****   /* USER CODE END ADC1_Init 0 */
  37:Core/Src/adc.c **** 
  38:Core/Src/adc.c ****   ADC_ChannelConfTypeDef sConfig = {0};
  38              		.loc 1 38 3 view .LVU1
  39              		.loc 1 38 26 is_stmt 0 view .LVU2
  40 0004 0023     		movs	r3, #0
  41 0006 0093     		str	r3, [sp]
  42 0008 0193     		str	r3, [sp, #4]
  43 000a 0293     		str	r3, [sp, #8]
  44 000c 0393     		str	r3, [sp, #12]
  39:Core/Src/adc.c **** 
  40:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_Init 1 */
  41:Core/Src/adc.c **** 
  42:Core/Src/adc.c ****   /* USER CODE END ADC1_Init 1 */
  43:Core/Src/adc.c **** 
  44:Core/Src/adc.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
  45:Core/Src/adc.c ****   */
  46:Core/Src/adc.c ****   hadc1.Instance = ADC1;
  45              		.loc 1 46 3 is_stmt 1 view .LVU3
  46              		.loc 1 46 18 is_stmt 0 view .LVU4
  47 000e 2648     		ldr	r0, .L13
  48 0010 264A     		ldr	r2, .L13+4
  49 0012 0260     		str	r2, [r0]
  47:Core/Src/adc.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  50              		.loc 1 47 3 is_stmt 1 view .LVU5
  51              		.loc 1 47 29 is_stmt 0 view .LVU6
  52 0014 4360     		str	r3, [r0, #4]
  48:Core/Src/adc.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  53              		.loc 1 48 3 is_stmt 1 view .LVU7
  54              		.loc 1 48 25 is_stmt 0 view .LVU8
  55 0016 8360     		str	r3, [r0, #8]
  49:Core/Src/adc.c ****   hadc1.Init.ScanConvMode = ENABLE;
  56              		.loc 1 49 3 is_stmt 1 view .LVU9
  57              		.loc 1 49 27 is_stmt 0 view .LVU10
  58 0018 0122     		movs	r2, #1
  59 001a 0261     		str	r2, [r0, #16]
  50:Core/Src/adc.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
  60              		.loc 1 50 3 is_stmt 1 view .LVU11
  61              		.loc 1 50 33 is_stmt 0 view .LVU12
  62 001c 0376     		strb	r3, [r0, #24]
  51:Core/Src/adc.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
  63              		.loc 1 51 3 is_stmt 1 view .LVU13
  64              		.loc 1 51 36 is_stmt 0 view .LVU14
ARM GAS  /tmp/ccDWrItb.s 			page 3


  65 001e 80F82030 		strb	r3, [r0, #32]
  52:Core/Src/adc.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  66              		.loc 1 52 3 is_stmt 1 view .LVU15
  67              		.loc 1 52 35 is_stmt 0 view .LVU16
  68 0022 4FF08051 		mov	r1, #268435456
  69 0026 C162     		str	r1, [r0, #44]
  53:Core/Src/adc.c ****   hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
  70              		.loc 1 53 3 is_stmt 1 view .LVU17
  71              		.loc 1 53 31 is_stmt 0 view .LVU18
  72 0028 4FF0C061 		mov	r1, #100663296
  73 002c 8162     		str	r1, [r0, #40]
  54:Core/Src/adc.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  74              		.loc 1 54 3 is_stmt 1 view .LVU19
  75              		.loc 1 54 24 is_stmt 0 view .LVU20
  76 002e C360     		str	r3, [r0, #12]
  55:Core/Src/adc.c ****   hadc1.Init.NbrOfConversion = 4;
  77              		.loc 1 55 3 is_stmt 1 view .LVU21
  78              		.loc 1 55 30 is_stmt 0 view .LVU22
  79 0030 0421     		movs	r1, #4
  80 0032 C161     		str	r1, [r0, #28]
  56:Core/Src/adc.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
  81              		.loc 1 56 3 is_stmt 1 view .LVU23
  82              		.loc 1 56 36 is_stmt 0 view .LVU24
  83 0034 80F83020 		strb	r2, [r0, #48]
  57:Core/Src/adc.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  84              		.loc 1 57 3 is_stmt 1 view .LVU25
  85              		.loc 1 57 27 is_stmt 0 view .LVU26
  86 0038 4361     		str	r3, [r0, #20]
  58:Core/Src/adc.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
  87              		.loc 1 58 3 is_stmt 1 view .LVU27
  88              		.loc 1 58 7 is_stmt 0 view .LVU28
  89 003a FFF7FEFF 		bl	HAL_ADC_Init
  90              	.LVL0:
  91              		.loc 1 58 6 discriminator 1 view .LVU29
  92 003e 20BB     		cbnz	r0, .L8
  93              	.L2:
  59:Core/Src/adc.c ****   {
  60:Core/Src/adc.c ****     Error_Handler();
  61:Core/Src/adc.c ****   }
  62:Core/Src/adc.c **** 
  63:Core/Src/adc.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
  64:Core/Src/adc.c ****   */
  65:Core/Src/adc.c ****   sConfig.Channel = ADC_CHANNEL_14;
  94              		.loc 1 65 3 is_stmt 1 view .LVU30
  95              		.loc 1 65 19 is_stmt 0 view .LVU31
  96 0040 0E23     		movs	r3, #14
  97 0042 0093     		str	r3, [sp]
  66:Core/Src/adc.c ****   sConfig.Rank = 1;
  98              		.loc 1 66 3 is_stmt 1 view .LVU32
  99              		.loc 1 66 16 is_stmt 0 view .LVU33
 100 0044 0123     		movs	r3, #1
 101 0046 0193     		str	r3, [sp, #4]
  67:Core/Src/adc.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 102              		.loc 1 67 3 is_stmt 1 view .LVU34
 103              		.loc 1 67 24 is_stmt 0 view .LVU35
 104 0048 0023     		movs	r3, #0
 105 004a 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccDWrItb.s 			page 4


  68:Core/Src/adc.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 106              		.loc 1 68 3 is_stmt 1 view .LVU36
 107              		.loc 1 68 7 is_stmt 0 view .LVU37
 108 004c 6946     		mov	r1, sp
 109 004e 1648     		ldr	r0, .L13
 110 0050 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 111              	.LVL1:
 112              		.loc 1 68 6 discriminator 1 view .LVU38
 113 0054 E0B9     		cbnz	r0, .L9
 114              	.L3:
  69:Core/Src/adc.c ****   {
  70:Core/Src/adc.c ****     Error_Handler();
  71:Core/Src/adc.c ****   }
  72:Core/Src/adc.c **** 
  73:Core/Src/adc.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
  74:Core/Src/adc.c ****   */
  75:Core/Src/adc.c ****   sConfig.Channel = ADC_CHANNEL_8;
 115              		.loc 1 75 3 is_stmt 1 view .LVU39
 116              		.loc 1 75 19 is_stmt 0 view .LVU40
 117 0056 0823     		movs	r3, #8
 118 0058 0093     		str	r3, [sp]
  76:Core/Src/adc.c ****   sConfig.Rank = 2;
 119              		.loc 1 76 3 is_stmt 1 view .LVU41
 120              		.loc 1 76 16 is_stmt 0 view .LVU42
 121 005a 0223     		movs	r3, #2
 122 005c 0193     		str	r3, [sp, #4]
  77:Core/Src/adc.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 123              		.loc 1 77 3 is_stmt 1 view .LVU43
 124              		.loc 1 77 7 is_stmt 0 view .LVU44
 125 005e 6946     		mov	r1, sp
 126 0060 1148     		ldr	r0, .L13
 127 0062 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 128              	.LVL2:
 129              		.loc 1 77 6 discriminator 1 view .LVU45
 130 0066 B0B9     		cbnz	r0, .L10
 131              	.L4:
  78:Core/Src/adc.c ****   {
  79:Core/Src/adc.c ****     Error_Handler();
  80:Core/Src/adc.c ****   }
  81:Core/Src/adc.c **** 
  82:Core/Src/adc.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
  83:Core/Src/adc.c ****   */
  84:Core/Src/adc.c ****   sConfig.Rank = 3;
 132              		.loc 1 84 3 is_stmt 1 view .LVU46
 133              		.loc 1 84 16 is_stmt 0 view .LVU47
 134 0068 0323     		movs	r3, #3
 135 006a 0193     		str	r3, [sp, #4]
  85:Core/Src/adc.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 136              		.loc 1 85 3 is_stmt 1 view .LVU48
 137              		.loc 1 85 7 is_stmt 0 view .LVU49
 138 006c 6946     		mov	r1, sp
 139 006e 0E48     		ldr	r0, .L13
 140 0070 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 141              	.LVL3:
 142              		.loc 1 85 6 discriminator 1 view .LVU50
 143 0074 90B9     		cbnz	r0, .L11
 144              	.L5:
ARM GAS  /tmp/ccDWrItb.s 			page 5


  86:Core/Src/adc.c ****   {
  87:Core/Src/adc.c ****     Error_Handler();
  88:Core/Src/adc.c ****   }
  89:Core/Src/adc.c **** 
  90:Core/Src/adc.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
  91:Core/Src/adc.c ****   */
  92:Core/Src/adc.c ****   sConfig.Rank = 4;
 145              		.loc 1 92 3 is_stmt 1 view .LVU51
 146              		.loc 1 92 16 is_stmt 0 view .LVU52
 147 0076 0423     		movs	r3, #4
 148 0078 0193     		str	r3, [sp, #4]
  93:Core/Src/adc.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 149              		.loc 1 93 3 is_stmt 1 view .LVU53
 150              		.loc 1 93 7 is_stmt 0 view .LVU54
 151 007a 6946     		mov	r1, sp
 152 007c 0A48     		ldr	r0, .L13
 153 007e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 154              	.LVL4:
 155              		.loc 1 93 6 discriminator 1 view .LVU55
 156 0082 70B9     		cbnz	r0, .L12
 157              	.L1:
  94:Core/Src/adc.c ****   {
  95:Core/Src/adc.c ****     Error_Handler();
  96:Core/Src/adc.c ****   }
  97:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_Init 2 */
  98:Core/Src/adc.c **** 
  99:Core/Src/adc.c ****   /* USER CODE END ADC1_Init 2 */
 100:Core/Src/adc.c **** 
 101:Core/Src/adc.c **** }
 158              		.loc 1 101 1 view .LVU56
 159 0084 05B0     		add	sp, sp, #20
 160              		.cfi_remember_state
 161              		.cfi_def_cfa_offset 4
 162              		@ sp needed
 163 0086 5DF804FB 		ldr	pc, [sp], #4
 164              	.L8:
 165              		.cfi_restore_state
  60:Core/Src/adc.c ****   }
 166              		.loc 1 60 5 is_stmt 1 view .LVU57
 167 008a FFF7FEFF 		bl	Error_Handler
 168              	.LVL5:
 169 008e D7E7     		b	.L2
 170              	.L9:
  70:Core/Src/adc.c ****   }
 171              		.loc 1 70 5 view .LVU58
 172 0090 FFF7FEFF 		bl	Error_Handler
 173              	.LVL6:
 174 0094 DFE7     		b	.L3
 175              	.L10:
  79:Core/Src/adc.c ****   }
 176              		.loc 1 79 5 view .LVU59
 177 0096 FFF7FEFF 		bl	Error_Handler
 178              	.LVL7:
 179 009a E5E7     		b	.L4
 180              	.L11:
  87:Core/Src/adc.c ****   }
 181              		.loc 1 87 5 view .LVU60
ARM GAS  /tmp/ccDWrItb.s 			page 6


 182 009c FFF7FEFF 		bl	Error_Handler
 183              	.LVL8:
 184 00a0 E9E7     		b	.L5
 185              	.L12:
  95:Core/Src/adc.c ****   }
 186              		.loc 1 95 5 view .LVU61
 187 00a2 FFF7FEFF 		bl	Error_Handler
 188              	.LVL9:
 189              		.loc 1 101 1 is_stmt 0 view .LVU62
 190 00a6 EDE7     		b	.L1
 191              	.L14:
 192              		.align	2
 193              	.L13:
 194 00a8 00000000 		.word	hadc1
 195 00ac 00200140 		.word	1073815552
 196              		.cfi_endproc
 197              	.LFE239:
 199              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 200              		.align	1
 201              		.global	HAL_ADC_MspInit
 202              		.syntax unified
 203              		.thumb
 204              		.thumb_func
 206              	HAL_ADC_MspInit:
 207              	.LVL10:
 208              	.LFB240:
 102:Core/Src/adc.c **** 
 103:Core/Src/adc.c **** void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
 104:Core/Src/adc.c **** {
 209              		.loc 1 104 1 is_stmt 1 view -0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 32
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              		.loc 1 104 1 is_stmt 0 view .LVU64
 214 0000 70B5     		push	{r4, r5, r6, lr}
 215              		.cfi_def_cfa_offset 16
 216              		.cfi_offset 4, -16
 217              		.cfi_offset 5, -12
 218              		.cfi_offset 6, -8
 219              		.cfi_offset 14, -4
 220 0002 88B0     		sub	sp, sp, #32
 221              		.cfi_def_cfa_offset 48
 105:Core/Src/adc.c **** 
 106:Core/Src/adc.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 222              		.loc 1 106 3 is_stmt 1 view .LVU65
 223              		.loc 1 106 20 is_stmt 0 view .LVU66
 224 0004 0023     		movs	r3, #0
 225 0006 0393     		str	r3, [sp, #12]
 226 0008 0493     		str	r3, [sp, #16]
 227 000a 0593     		str	r3, [sp, #20]
 228 000c 0693     		str	r3, [sp, #24]
 229 000e 0793     		str	r3, [sp, #28]
 107:Core/Src/adc.c ****   if(adcHandle->Instance==ADC1)
 230              		.loc 1 107 3 is_stmt 1 view .LVU67
 231              		.loc 1 107 15 is_stmt 0 view .LVU68
 232 0010 0268     		ldr	r2, [r0]
 233              		.loc 1 107 5 view .LVU69
ARM GAS  /tmp/ccDWrItb.s 			page 7


 234 0012 03F18043 		add	r3, r3, #1073741824
 235 0016 03F59033 		add	r3, r3, #73728
 236 001a 9A42     		cmp	r2, r3
 237 001c 01D0     		beq	.L19
 238              	.LVL11:
 239              	.L15:
 108:Core/Src/adc.c ****   {
 109:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspInit 0 */
 110:Core/Src/adc.c **** 
 111:Core/Src/adc.c ****   /* USER CODE END ADC1_MspInit 0 */
 112:Core/Src/adc.c ****     /* ADC1 clock enable */
 113:Core/Src/adc.c ****     __HAL_RCC_ADC1_CLK_ENABLE();
 114:Core/Src/adc.c **** 
 115:Core/Src/adc.c ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 116:Core/Src/adc.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 117:Core/Src/adc.c ****     /**ADC1 GPIO Configuration
 118:Core/Src/adc.c ****     PC4     ------> ADC1_IN14
 119:Core/Src/adc.c ****     PC5     ------> ADC1_IN15
 120:Core/Src/adc.c ****     PB0     ------> ADC1_IN8
 121:Core/Src/adc.c ****     PB1     ------> ADC1_IN9
 122:Core/Src/adc.c ****     */
 123:Core/Src/adc.c ****     GPIO_InitStruct.Pin = ADC_BAT0_Pin|ADC_BAT1_Pin;
 124:Core/Src/adc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 125:Core/Src/adc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 126:Core/Src/adc.c ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 127:Core/Src/adc.c **** 
 128:Core/Src/adc.c ****     GPIO_InitStruct.Pin = ADC_BAT2_Pin|ADC_BAT3_Pin;
 129:Core/Src/adc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 130:Core/Src/adc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 131:Core/Src/adc.c ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 132:Core/Src/adc.c **** 
 133:Core/Src/adc.c ****     /* ADC1 DMA Init */
 134:Core/Src/adc.c ****     /* ADC1 Init */
 135:Core/Src/adc.c ****     hdma_adc1.Instance = DMA2_Stream0;
 136:Core/Src/adc.c ****     hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 137:Core/Src/adc.c ****     hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 138:Core/Src/adc.c ****     hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 139:Core/Src/adc.c ****     hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 140:Core/Src/adc.c ****     hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 141:Core/Src/adc.c ****     hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 142:Core/Src/adc.c ****     hdma_adc1.Init.Mode = DMA_CIRCULAR;
 143:Core/Src/adc.c ****     hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 144:Core/Src/adc.c ****     hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 145:Core/Src/adc.c ****     if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 146:Core/Src/adc.c ****     {
 147:Core/Src/adc.c ****       Error_Handler();
 148:Core/Src/adc.c ****     }
 149:Core/Src/adc.c **** 
 150:Core/Src/adc.c ****     __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 151:Core/Src/adc.c **** 
 152:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspInit 1 */
 153:Core/Src/adc.c **** 
 154:Core/Src/adc.c ****   /* USER CODE END ADC1_MspInit 1 */
 155:Core/Src/adc.c ****   }
 156:Core/Src/adc.c **** }
 240              		.loc 1 156 1 view .LVU70
 241 001e 08B0     		add	sp, sp, #32
ARM GAS  /tmp/ccDWrItb.s 			page 8


 242              		.cfi_remember_state
 243              		.cfi_def_cfa_offset 16
 244              		@ sp needed
 245 0020 70BD     		pop	{r4, r5, r6, pc}
 246              	.LVL12:
 247              	.L19:
 248              		.cfi_restore_state
 249              		.loc 1 156 1 view .LVU71
 250 0022 0446     		mov	r4, r0
 113:Core/Src/adc.c **** 
 251              		.loc 1 113 5 is_stmt 1 view .LVU72
 252              	.LBB2:
 113:Core/Src/adc.c **** 
 253              		.loc 1 113 5 view .LVU73
 254 0024 0025     		movs	r5, #0
 255 0026 0095     		str	r5, [sp]
 113:Core/Src/adc.c **** 
 256              		.loc 1 113 5 view .LVU74
 257 0028 03F58C33 		add	r3, r3, #71680
 258 002c 5A6C     		ldr	r2, [r3, #68]
 259 002e 42F48072 		orr	r2, r2, #256
 260 0032 5A64     		str	r2, [r3, #68]
 113:Core/Src/adc.c **** 
 261              		.loc 1 113 5 view .LVU75
 262 0034 5A6C     		ldr	r2, [r3, #68]
 263 0036 02F48072 		and	r2, r2, #256
 264 003a 0092     		str	r2, [sp]
 113:Core/Src/adc.c **** 
 265              		.loc 1 113 5 view .LVU76
 266 003c 009A     		ldr	r2, [sp]
 267              	.LBE2:
 113:Core/Src/adc.c **** 
 268              		.loc 1 113 5 view .LVU77
 115:Core/Src/adc.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 269              		.loc 1 115 5 view .LVU78
 270              	.LBB3:
 115:Core/Src/adc.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 271              		.loc 1 115 5 view .LVU79
 272 003e 0195     		str	r5, [sp, #4]
 115:Core/Src/adc.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 273              		.loc 1 115 5 view .LVU80
 274 0040 1A6B     		ldr	r2, [r3, #48]
 275 0042 42F00402 		orr	r2, r2, #4
 276 0046 1A63     		str	r2, [r3, #48]
 115:Core/Src/adc.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 277              		.loc 1 115 5 view .LVU81
 278 0048 1A6B     		ldr	r2, [r3, #48]
 279 004a 02F00402 		and	r2, r2, #4
 280 004e 0192     		str	r2, [sp, #4]
 115:Core/Src/adc.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 281              		.loc 1 115 5 view .LVU82
 282 0050 019A     		ldr	r2, [sp, #4]
 283              	.LBE3:
 115:Core/Src/adc.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 284              		.loc 1 115 5 view .LVU83
 116:Core/Src/adc.c ****     /**ADC1 GPIO Configuration
 285              		.loc 1 116 5 view .LVU84
ARM GAS  /tmp/ccDWrItb.s 			page 9


 286              	.LBB4:
 116:Core/Src/adc.c ****     /**ADC1 GPIO Configuration
 287              		.loc 1 116 5 view .LVU85
 288 0052 0295     		str	r5, [sp, #8]
 116:Core/Src/adc.c ****     /**ADC1 GPIO Configuration
 289              		.loc 1 116 5 view .LVU86
 290 0054 1A6B     		ldr	r2, [r3, #48]
 291 0056 42F00202 		orr	r2, r2, #2
 292 005a 1A63     		str	r2, [r3, #48]
 116:Core/Src/adc.c ****     /**ADC1 GPIO Configuration
 293              		.loc 1 116 5 view .LVU87
 294 005c 1B6B     		ldr	r3, [r3, #48]
 295 005e 03F00203 		and	r3, r3, #2
 296 0062 0293     		str	r3, [sp, #8]
 116:Core/Src/adc.c ****     /**ADC1 GPIO Configuration
 297              		.loc 1 116 5 view .LVU88
 298 0064 029B     		ldr	r3, [sp, #8]
 299              	.LBE4:
 116:Core/Src/adc.c ****     /**ADC1 GPIO Configuration
 300              		.loc 1 116 5 view .LVU89
 123:Core/Src/adc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 301              		.loc 1 123 5 view .LVU90
 123:Core/Src/adc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 302              		.loc 1 123 25 is_stmt 0 view .LVU91
 303 0066 3023     		movs	r3, #48
 304 0068 0393     		str	r3, [sp, #12]
 124:Core/Src/adc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 305              		.loc 1 124 5 is_stmt 1 view .LVU92
 124:Core/Src/adc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 306              		.loc 1 124 26 is_stmt 0 view .LVU93
 307 006a 0326     		movs	r6, #3
 308 006c 0496     		str	r6, [sp, #16]
 125:Core/Src/adc.c ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 309              		.loc 1 125 5 is_stmt 1 view .LVU94
 126:Core/Src/adc.c **** 
 310              		.loc 1 126 5 view .LVU95
 311 006e 03A9     		add	r1, sp, #12
 312 0070 1348     		ldr	r0, .L21
 313              	.LVL13:
 126:Core/Src/adc.c **** 
 314              		.loc 1 126 5 is_stmt 0 view .LVU96
 315 0072 FFF7FEFF 		bl	HAL_GPIO_Init
 316              	.LVL14:
 128:Core/Src/adc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 317              		.loc 1 128 5 is_stmt 1 view .LVU97
 128:Core/Src/adc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 318              		.loc 1 128 25 is_stmt 0 view .LVU98
 319 0076 0396     		str	r6, [sp, #12]
 129:Core/Src/adc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 320              		.loc 1 129 5 is_stmt 1 view .LVU99
 129:Core/Src/adc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 321              		.loc 1 129 26 is_stmt 0 view .LVU100
 322 0078 0496     		str	r6, [sp, #16]
 130:Core/Src/adc.c ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 323              		.loc 1 130 5 is_stmt 1 view .LVU101
 130:Core/Src/adc.c ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 324              		.loc 1 130 26 is_stmt 0 view .LVU102
ARM GAS  /tmp/ccDWrItb.s 			page 10


 325 007a 0595     		str	r5, [sp, #20]
 131:Core/Src/adc.c **** 
 326              		.loc 1 131 5 is_stmt 1 view .LVU103
 327 007c 03A9     		add	r1, sp, #12
 328 007e 1148     		ldr	r0, .L21+4
 329 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 330              	.LVL15:
 135:Core/Src/adc.c ****     hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 331              		.loc 1 135 5 view .LVU104
 135:Core/Src/adc.c ****     hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 332              		.loc 1 135 24 is_stmt 0 view .LVU105
 333 0084 1048     		ldr	r0, .L21+8
 334 0086 114B     		ldr	r3, .L21+12
 335 0088 0360     		str	r3, [r0]
 136:Core/Src/adc.c ****     hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 336              		.loc 1 136 5 is_stmt 1 view .LVU106
 136:Core/Src/adc.c ****     hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 337              		.loc 1 136 28 is_stmt 0 view .LVU107
 338 008a 4560     		str	r5, [r0, #4]
 137:Core/Src/adc.c ****     hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 339              		.loc 1 137 5 is_stmt 1 view .LVU108
 137:Core/Src/adc.c ****     hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 340              		.loc 1 137 30 is_stmt 0 view .LVU109
 341 008c 8560     		str	r5, [r0, #8]
 138:Core/Src/adc.c ****     hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 342              		.loc 1 138 5 is_stmt 1 view .LVU110
 138:Core/Src/adc.c ****     hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 343              		.loc 1 138 30 is_stmt 0 view .LVU111
 344 008e C560     		str	r5, [r0, #12]
 139:Core/Src/adc.c ****     hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 345              		.loc 1 139 5 is_stmt 1 view .LVU112
 139:Core/Src/adc.c ****     hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 346              		.loc 1 139 27 is_stmt 0 view .LVU113
 347 0090 4FF48063 		mov	r3, #1024
 348 0094 0361     		str	r3, [r0, #16]
 140:Core/Src/adc.c ****     hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 349              		.loc 1 140 5 is_stmt 1 view .LVU114
 140:Core/Src/adc.c ****     hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 350              		.loc 1 140 40 is_stmt 0 view .LVU115
 351 0096 4FF40063 		mov	r3, #2048
 352 009a 4361     		str	r3, [r0, #20]
 141:Core/Src/adc.c ****     hdma_adc1.Init.Mode = DMA_CIRCULAR;
 353              		.loc 1 141 5 is_stmt 1 view .LVU116
 141:Core/Src/adc.c ****     hdma_adc1.Init.Mode = DMA_CIRCULAR;
 354              		.loc 1 141 37 is_stmt 0 view .LVU117
 355 009c 4FF40053 		mov	r3, #8192
 356 00a0 8361     		str	r3, [r0, #24]
 142:Core/Src/adc.c ****     hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 357              		.loc 1 142 5 is_stmt 1 view .LVU118
 142:Core/Src/adc.c ****     hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 358              		.loc 1 142 25 is_stmt 0 view .LVU119
 359 00a2 4FF48073 		mov	r3, #256
 360 00a6 C361     		str	r3, [r0, #28]
 143:Core/Src/adc.c ****     hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 361              		.loc 1 143 5 is_stmt 1 view .LVU120
 143:Core/Src/adc.c ****     hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 362              		.loc 1 143 29 is_stmt 0 view .LVU121
ARM GAS  /tmp/ccDWrItb.s 			page 11


 363 00a8 0562     		str	r5, [r0, #32]
 144:Core/Src/adc.c ****     if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 364              		.loc 1 144 5 is_stmt 1 view .LVU122
 144:Core/Src/adc.c ****     if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 365              		.loc 1 144 29 is_stmt 0 view .LVU123
 366 00aa 4562     		str	r5, [r0, #36]
 145:Core/Src/adc.c ****     {
 367              		.loc 1 145 5 is_stmt 1 view .LVU124
 145:Core/Src/adc.c ****     {
 368              		.loc 1 145 9 is_stmt 0 view .LVU125
 369 00ac FFF7FEFF 		bl	HAL_DMA_Init
 370              	.LVL16:
 145:Core/Src/adc.c ****     {
 371              		.loc 1 145 8 discriminator 1 view .LVU126
 372 00b0 18B9     		cbnz	r0, .L20
 373              	.L17:
 150:Core/Src/adc.c **** 
 374              		.loc 1 150 5 is_stmt 1 view .LVU127
 150:Core/Src/adc.c **** 
 375              		.loc 1 150 5 view .LVU128
 376 00b2 054B     		ldr	r3, .L21+8
 377 00b4 A363     		str	r3, [r4, #56]
 150:Core/Src/adc.c **** 
 378              		.loc 1 150 5 view .LVU129
 379 00b6 9C63     		str	r4, [r3, #56]
 150:Core/Src/adc.c **** 
 380              		.loc 1 150 5 discriminator 1 view .LVU130
 381              		.loc 1 156 1 is_stmt 0 view .LVU131
 382 00b8 B1E7     		b	.L15
 383              	.L20:
 147:Core/Src/adc.c ****     }
 384              		.loc 1 147 7 is_stmt 1 view .LVU132
 385 00ba FFF7FEFF 		bl	Error_Handler
 386              	.LVL17:
 387 00be F8E7     		b	.L17
 388              	.L22:
 389              		.align	2
 390              	.L21:
 391 00c0 00080240 		.word	1073874944
 392 00c4 00040240 		.word	1073873920
 393 00c8 00000000 		.word	hdma_adc1
 394 00cc 10640240 		.word	1073898512
 395              		.cfi_endproc
 396              	.LFE240:
 398              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 399              		.align	1
 400              		.global	HAL_ADC_MspDeInit
 401              		.syntax unified
 402              		.thumb
 403              		.thumb_func
 405              	HAL_ADC_MspDeInit:
 406              	.LVL18:
 407              	.LFB241:
 157:Core/Src/adc.c **** 
 158:Core/Src/adc.c **** void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
 159:Core/Src/adc.c **** {
 408              		.loc 1 159 1 view -0
ARM GAS  /tmp/ccDWrItb.s 			page 12


 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 160:Core/Src/adc.c **** 
 161:Core/Src/adc.c ****   if(adcHandle->Instance==ADC1)
 412              		.loc 1 161 3 view .LVU134
 413              		.loc 1 161 15 is_stmt 0 view .LVU135
 414 0000 0268     		ldr	r2, [r0]
 415              		.loc 1 161 5 view .LVU136
 416 0002 0B4B     		ldr	r3, .L30
 417 0004 9A42     		cmp	r2, r3
 418 0006 00D0     		beq	.L29
 419 0008 7047     		bx	lr
 420              	.L29:
 159:Core/Src/adc.c **** 
 421              		.loc 1 159 1 view .LVU137
 422 000a 10B5     		push	{r4, lr}
 423              		.cfi_def_cfa_offset 8
 424              		.cfi_offset 4, -8
 425              		.cfi_offset 14, -4
 426 000c 0446     		mov	r4, r0
 162:Core/Src/adc.c ****   {
 163:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspDeInit 0 */
 164:Core/Src/adc.c **** 
 165:Core/Src/adc.c ****   /* USER CODE END ADC1_MspDeInit 0 */
 166:Core/Src/adc.c ****     /* Peripheral clock disable */
 167:Core/Src/adc.c ****     __HAL_RCC_ADC1_CLK_DISABLE();
 427              		.loc 1 167 5 is_stmt 1 view .LVU138
 428 000e 094A     		ldr	r2, .L30+4
 429 0010 536C     		ldr	r3, [r2, #68]
 430 0012 23F48073 		bic	r3, r3, #256
 431 0016 5364     		str	r3, [r2, #68]
 168:Core/Src/adc.c **** 
 169:Core/Src/adc.c ****     /**ADC1 GPIO Configuration
 170:Core/Src/adc.c ****     PC4     ------> ADC1_IN14
 171:Core/Src/adc.c ****     PC5     ------> ADC1_IN15
 172:Core/Src/adc.c ****     PB0     ------> ADC1_IN8
 173:Core/Src/adc.c ****     PB1     ------> ADC1_IN9
 174:Core/Src/adc.c ****     */
 175:Core/Src/adc.c ****     HAL_GPIO_DeInit(GPIOC, ADC_BAT0_Pin|ADC_BAT1_Pin);
 432              		.loc 1 175 5 view .LVU139
 433 0018 3021     		movs	r1, #48
 434 001a 0748     		ldr	r0, .L30+8
 435              	.LVL19:
 436              		.loc 1 175 5 is_stmt 0 view .LVU140
 437 001c FFF7FEFF 		bl	HAL_GPIO_DeInit
 438              	.LVL20:
 176:Core/Src/adc.c **** 
 177:Core/Src/adc.c ****     HAL_GPIO_DeInit(GPIOB, ADC_BAT2_Pin|ADC_BAT3_Pin);
 439              		.loc 1 177 5 is_stmt 1 view .LVU141
 440 0020 0321     		movs	r1, #3
 441 0022 0648     		ldr	r0, .L30+12
 442 0024 FFF7FEFF 		bl	HAL_GPIO_DeInit
 443              	.LVL21:
 178:Core/Src/adc.c **** 
 179:Core/Src/adc.c ****     /* ADC1 DMA DeInit */
 180:Core/Src/adc.c ****     HAL_DMA_DeInit(adcHandle->DMA_Handle);
ARM GAS  /tmp/ccDWrItb.s 			page 13


 444              		.loc 1 180 5 view .LVU142
 445 0028 A06B     		ldr	r0, [r4, #56]
 446 002a FFF7FEFF 		bl	HAL_DMA_DeInit
 447              	.LVL22:
 181:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspDeInit 1 */
 182:Core/Src/adc.c **** 
 183:Core/Src/adc.c ****   /* USER CODE END ADC1_MspDeInit 1 */
 184:Core/Src/adc.c ****   }
 185:Core/Src/adc.c **** }
 448              		.loc 1 185 1 is_stmt 0 view .LVU143
 449 002e 10BD     		pop	{r4, pc}
 450              	.LVL23:
 451              	.L31:
 452              		.loc 1 185 1 view .LVU144
 453              		.align	2
 454              	.L30:
 455 0030 00200140 		.word	1073815552
 456 0034 00380240 		.word	1073887232
 457 0038 00080240 		.word	1073874944
 458 003c 00040240 		.word	1073873920
 459              		.cfi_endproc
 460              	.LFE241:
 462              		.global	hdma_adc1
 463              		.section	.bss.hdma_adc1,"aw",%nobits
 464              		.align	2
 467              	hdma_adc1:
 468 0000 00000000 		.space	96
 468      00000000 
 468      00000000 
 468      00000000 
 468      00000000 
 469              		.global	hadc1
 470              		.section	.bss.hadc1,"aw",%nobits
 471              		.align	2
 474              	hadc1:
 475 0000 00000000 		.space	72
 475      00000000 
 475      00000000 
 475      00000000 
 475      00000000 
 476              		.text
 477              	.Letext0:
 478              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 479              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 480              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 481              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 482              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 483              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 484              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 485              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 486              		.file 10 "Core/Inc/adc.h"
 487              		.file 11 "Core/Inc/main.h"
ARM GAS  /tmp/ccDWrItb.s 			page 14


DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
     /tmp/ccDWrItb.s:21     .text.MX_ADC1_Init:00000000 $t
     /tmp/ccDWrItb.s:27     .text.MX_ADC1_Init:00000000 MX_ADC1_Init
     /tmp/ccDWrItb.s:194    .text.MX_ADC1_Init:000000a8 $d
     /tmp/ccDWrItb.s:474    .bss.hadc1:00000000 hadc1
     /tmp/ccDWrItb.s:200    .text.HAL_ADC_MspInit:00000000 $t
     /tmp/ccDWrItb.s:206    .text.HAL_ADC_MspInit:00000000 HAL_ADC_MspInit
     /tmp/ccDWrItb.s:391    .text.HAL_ADC_MspInit:000000c0 $d
     /tmp/ccDWrItb.s:467    .bss.hdma_adc1:00000000 hdma_adc1
     /tmp/ccDWrItb.s:399    .text.HAL_ADC_MspDeInit:00000000 $t
     /tmp/ccDWrItb.s:405    .text.HAL_ADC_MspDeInit:00000000 HAL_ADC_MspDeInit
     /tmp/ccDWrItb.s:455    .text.HAL_ADC_MspDeInit:00000030 $d
     /tmp/ccDWrItb.s:464    .bss.hdma_adc1:00000000 $d
     /tmp/ccDWrItb.s:471    .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
HAL_ADC_Init
HAL_ADC_ConfigChannel
Error_Handler
HAL_GPIO_Init
HAL_DMA_Init
HAL_GPIO_DeInit
HAL_DMA_DeInit
